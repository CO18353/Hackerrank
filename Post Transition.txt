#include <stdio.h>
#include <stdlib.h>
#define MAX_STRING_LENGTH 6

struct package
{
	char* id;
	int weight;
};

typedef struct package package;

struct post_office
{
	int min_weight;
	int max_weight;
	package* packages;
	int packages_count;
};

typedef struct post_office post_office;

struct town
{
	char* name;
	post_office* offices;
	int offices_count;
};

typedef struct town town;
void print_all_packages(town t)
{
    printf("%s:\n",t.name);
	int a=0;
    while(a<t.offices_count)
	{
		printf("\t%d:\n",a);
		int b=0;
		while(b<t.offices[a].packages_count)
		{
			printf("\t\t%s\n",t.offices[a].packages[b].id);
			b++;
		}
		a++;	
	}
    
}

void send_all_acceptable_packages(town* source, int source_office_index, town* target, int target_office_index)
{    
    int max = target->offices[target_office_index].max_weight;
    int min = target->offices[target_office_index].min_weight;
    package* temp = NULL;
    int w, na=0;
    post_office* s = source->offices + source_office_index;
    post_office* t = target->offices + target_office_index;
    int a=0;                  
    while(a< s->packages_count)
    {
        w = s->packages[a].weight;
        if(w <= max && w >= min)
        {
            t->packages_count++;
            t->packages = (package*)realloc(t->packages, sizeof(package) * t->packages_count);
            t->packages[t->packages_count-1] = s->packages[a];         
        }
        else
        {
            na++;
            temp = (package*)realloc(temp, sizeof(package) * na);
            temp[na-1] = s->packages[a];
        }
	a++;
    }
    s->packages = temp;
    s->packages_count = na;
}
 
 town town_with_most_packages(town* towns, int towns_count)
{
    town max_town;
    int s, m = 0;
    int a=0;
    while(a<towns_count)
    {
        s = 0;
	int b=0;
        while(b<towns[a].offices_count)
	{
            s+= towns[a].offices[b].packages_count;
        	b++;
	}
	if(m < s)
        {
            max_town = towns[a];
            m = s;
        }
	a++;
    }
    return max_town;
}

town* find_town(town* towns, int towns_count, char* name) 
{
	int a=0;
    while(a<towns_count)
    {
        if(strcmp(towns[a].name,name) == 0)
            return towns + a; 
	a++; 
   }
    return NULL;
}
int main()
{
	int towns_count;
	scanf("%d", &towns_count);
	town* towns = malloc(sizeof(town)*towns_count);
	for (int i = 0; i < towns_count; i++) {
		towns[i].name = malloc(sizeof(char) * MAX_STRING_LENGTH);
		scanf("%s", towns[i].name);
		scanf("%d", &towns[i].offices_count);
		towns[i].offices = malloc(sizeof(post_office)*towns[i].offices_count);
		for (int j = 0; j < towns[i].offices_count; j++) {
			scanf("%d%d%d", &towns[i].offices[j].packages_count, &towns[i].offices[j].min_weight, &towns[i].offices[j].max_weight);
			towns[i].offices[j].packages = malloc(sizeof(package)*towns[i].offices[j].packages_count);
			for (int k = 0; k < towns[i].offices[j].packages_count; k++) {
				towns[i].offices[j].packages[k].id = malloc(sizeof(char) * MAX_STRING_LENGTH);
				scanf("%s", towns[i].offices[j].packages[k].id);
				scanf("%d", &towns[i].offices[j].packages[k].weight);
			}
		}
	}
	int queries;
	scanf("%d", &queries);
	char town_name[MAX_STRING_LENGTH];
	while (queries--) {
		int type;
		scanf("%d", &type);
		switch (type) {
		case 1:
			scanf("%s", town_name);
			town* t = find_town(towns, towns_count, town_name);
			print_all_packages(*t);
			break;
		case 2:
			scanf("%s", town_name);
			town* source = find_town(towns, towns_count, town_name);
			int source_index;
			scanf("%d", &source_index);
			scanf("%s", town_name);
			town* target = find_town(towns, towns_count, town_name);
			int target_index;
			scanf("%d", &target_index);
			send_all_acceptable_packages(source, source_index, target, target_index);
			break;
		case 3:
			printf("Town with the most number of packages is %s\n", town_with_most_packages(towns, towns_count).name);
			break;
		}
	}
	return 0;
}
